class CPU:
    def __init__(self, memory):
        self.memory: Memory = memory
        self.accumulator: int = 0
        self.cr: int = 0  # Current register (instruction pointer)

    def execute(self):
        while True:
            instruction = self.memory.get(self.cr)
            opcode, operand = divmod(instruction, 100)

            match opcode:
                case 10:  # READ
                    self.read(operand)
                case 11:  # WRITE
                    self.write(operand)
                case 20:  # LOAD
                    self.load(operand)
                case 21:  # STORE
                    self.store(operand)
                case 30:  # ADD
                    self.add(operand)
                case 31:  # SUBTRACT
                    self.subtract(operand)
                case 32:  # DIVIDE
                    self.divide(operand)
                case 33:  # MULTIPLY
                    self.multiply(operand)
                case 43:  # HALT
                    print("Program halted.")
                    break
                case _:
                    print(f"Unknown opcode: {opcode}. Halting execution.")
                    break
            self.cr += 1

    def read(self, operand):
        value = int(input(f"Enter a value for memory[{operand}]: "))
        self.memory.set(operand, value)

    def write(self, operand):
        value = self.memory.get(operand)
        print(f"Value at memory[{operand}]: {value}")

    def load(self, operand):
        self.accumulator = self.memory.get(operand)

    def store(self, operand):
        self.memory.set(operand, self.accumulator)

    def add(self, operand):
        self.accumulator += self.memory.get(operand)

    def subtract(self, operand):
        self.accumulator -= self.memory.get(operand)

    def divide(self, operand):
        divisor = self.memory.get(operand)
        if divisor == 0:
            print("Error: Division by zero. Halting execution.")
            exit(1)
        self.accumulator //= divisor

    def multiply(self, operand):
        self.accumulator *= self.memory.get(operand)


class Memory:
    def __init__(self, length=100):
        self.length = length
        self.words = [0] * length

    def get(self, index) -> int:
        if 0 <= index < self.length:
            return self.words[index]
        raise IndexError("Memory index out of range")

    def set(self, index: int, value: int):
        if 0 <= index < self.length:
            self.words[index] = value
        else:
            raise IndexError("Memory index out of range")


def main():
    memory = Memory()
    cpu = CPU(memory)

    # Load the program from the file
    try:
        with open('Test1-1.txt', 'r') as program_file:
            instructions = [int(line.strip()) for line in program_file.readlines()]
            for i, instruction in enumerate(instructions):
                memory.set(i, instruction)
    except FileNotFoundError:
        print("Error: Program file not found.")
        return
    except ValueError as e:
        print(f"Error reading program: {e}")
        return

    cpu.execute()

if __name__ == '__main__':
    main()
